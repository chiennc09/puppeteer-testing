{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-17T05:16:07.558Z",
    "end": "2025-06-17T05:16:21.169Z",
    "duration": 13611,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "135dd0f1-a22e-4b05-a871-856790d9409a",
      "title": "",
      "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\cart.test.js",
      "file": "\\tests\\cart.test.js",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 12,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const chai = await import('chai');\nexpect = chai.expect;",
          "err": {},
          "uuid": "371ffb54-ab06-4841-981f-58147634f0e0",
          "parentUUID": "135dd0f1-a22e-4b05-a871-856790d9409a",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c7f36be0-e06a-4a60-8630-34da38f8a580",
          "title": "Cart Functionality",
          "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\cart.test.js",
          "file": "\\tests\\cart.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Cart Functionality\"",
              "fullTitle": "Cart Functionality \"before all\" hook in \"Cart Functionality\"",
              "timedOut": false,
              "duration": 756,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "browser = await puppeteer.launch({\nheadless: false,\nslowMo: -30,\nargs: ['--start-maximized'], // Mở trình duyệt ở chế độ toàn màn hình\n    });\npage = await browser.newPage();\nawait page.setViewport({ width: 1280, height: 720 });",
              "err": {},
              "uuid": "b62304e2-78a6-4ab8-9a39-36e6cdb14bc2",
              "parentUUID": "c7f36be0-e06a-4a60-8630-34da38f8a580",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Cart Functionality\"",
              "fullTitle": "Cart Functionality \"after all\" hook in \"Cart Functionality\"",
              "timedOut": false,
              "duration": 449,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.close();",
              "err": {},
              "uuid": "6d88b87e-3aff-4a3a-8f6b-2650a7f5b11f",
              "parentUUID": "c7f36be0-e06a-4a60-8630-34da38f8a580",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Kiểm tra khi nhấn “Tiến hành thanh toán” sẽ chuyển đến trang thanh toán",
              "fullTitle": "Cart Functionality Kiểm tra khi nhấn “Tiến hành thanh toán” sẽ chuyển đến trang thanh toán",
              "timedOut": false,
              "duration": 12388,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\n// Thực thi các bước tuần tự\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            break;\n        case 'verify_product_in_cart':\n            await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.ux-quantity__button--plus');\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            console.log('url1: '+ page.url());\n            console.log('url2: '+ testCase.expectedResult);\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n    }\n}\n\n// if (testCase.id === 'GH_001' || testCase.id === 'GH_006') {\n//     // await page.waitForSelector('.header-cart-link.is-small');\n//     // await page.click('.header-cart-link.is-small');\n//     await page.waitForSelector('.woocommerce');\n//     const errorText = await page.$eval('.woocommerce', el => el.textContent);\n//     expect(errorText).to.include(testCase.expectedResult);\n//     // await page.waitForSelector('.woocommerce');\n//     // const errorText = await page.$eval('.woocommerce', el => el.textContent);\n//     // expect(errorText).to.include(testCase.expectedResult);\n// }else if (testCase.id === 'GH_002'){\n//     await page.waitForSelector('[role=\"alert\"]');\n//     const errorText = await page.$eval('[role=\"alert\"]', el => el.textContent);\n//     expect(errorText).to.include(testCase.expectedResult);\n// }",
              "err": {},
              "uuid": "8ff955ad-973f-42b8-8ea9-42b66b22dc14",
              "parentUUID": "c7f36be0-e06a-4a60-8630-34da38f8a580",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8ff955ad-973f-42b8-8ea9-42b66b22dc14"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12388,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.5.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}