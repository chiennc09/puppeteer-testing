{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 1,
    "pending": 0,
    "failures": 6,
    "start": "2025-06-16T18:24:31.410Z",
    "end": "2025-06-16T18:24:43.441Z",
    "duration": 12031,
    "testsRegistered": 7,
    "passPercent": 14.285714285714285,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c7f098e2-81c5-4a6f-98d6-9290f252aef8",
      "title": "",
      "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\cart.test.js",
      "file": "\\tests\\cart.test.js",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 24,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const chai = await import('chai');\nexpect = chai.expect;",
          "err": {},
          "uuid": "0388920a-49fa-4346-8f61-9a81b13127e9",
          "parentUUID": "c7f098e2-81c5-4a6f-98d6-9290f252aef8",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c18b4a8a-043d-44f9-a8ae-23fb21971ffe",
          "title": "Cart Functionality",
          "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\cart.test.js",
          "file": "\\tests\\cart.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Cart Functionality\"",
              "fullTitle": "Cart Functionality \"before all\" hook in \"Cart Functionality\"",
              "timedOut": false,
              "duration": 1162,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "browser = await puppeteer.launch({\nheadless: false, // Tắt headless để thấy trình duyệt\nargs: ['--start-maximized'], // Mở trình duyệt ở chế độ toàn màn hình\n    });\npage = await browser.newPage();\nawait page.setViewport({ width: 1280, height: 720 });",
              "err": {},
              "uuid": "088ac3bd-651f-449f-9ca4-f8b9dd4bafd9",
              "parentUUID": "c18b4a8a-043d-44f9-a8ae-23fb21971ffe",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Cart Functionality\"",
              "fullTitle": "Cart Functionality \"after all\" hook in \"Cart Functionality\"",
              "timedOut": false,
              "duration": 1227,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.close();",
              "err": {},
              "uuid": "b7c60459-4c7f-402e-bc5e-7d9a25f8efe7",
              "parentUUID": "c18b4a8a-043d-44f9-a8ae-23fb21971ffe",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Kiểm tra “Giỏ hàng” hiện thông tin “Không có sản phẩm” khi chưa thêm sản phẩm",
              "fullTitle": "Cart Functionality Kiểm tra “Giỏ hàng” hiện thông tin “Không có sản phẩm” khi chưa thêm sản phẩm",
              "timedOut": false,
              "duration": 6464,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(test.productUrl);\n}\n// Thực thi các bước tuần tự\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            break;\n        case 'verify_product_in_cart':\n            await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        \n        case 'verify_toast_message':\n            await page.waitForSelector('.toast-info');\n            const message = await page.$eval('.toast-info', el => el.textContent);\n            expect(message).to.include(test.expectedResult);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-btn');\n            await page.click('.checkout-btn');\n            break;\n        \n        case 'verify_url':\n            await page.waitForNavigation();\n            expect(page.url()).to.equal(test.expectedResult);\n            break;\n    }\n}\nif (testCase.id === 'GH_001') {\n    // await page.waitForSelector('.header-cart-link.is-small');\n    // await page.click('.header-cart-link.is-small');\n    await page.waitForSelector('.woocommerce-info.message-wrapper');\n    const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n    // await page.waitForSelector('.woocommerce');\n    // const errorText = await page.$eval('.woocommerce', el => el.textContent);\n    // expect(errorText).to.include(testCase.expectedResult);\n}else if (testCase.id === 'GH_002'){\n    await page.waitForSelector('[role=\"alert\"]');\n    const errorText = await page.$eval('[role=\"alert\"]', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n}",
              "err": {},
              "uuid": "fa135a15-f89d-4cb0-9d25-c81b6cb05279",
              "parentUUID": "c18b4a8a-043d-44f9-a8ae-23fb21971ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra thông tin “Thông báo thêm giỏ hàng thành công” khi nhấn “Thêm vào giỏ hàng”",
              "fullTitle": "Cart Functionality Kiểm tra thông tin “Thông báo thêm giỏ hàng thành công” khi nhấn “Thêm vào giỏ hàng”",
              "timedOut": false,
              "duration": 2555,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(test.productUrl);\n}\n// Thực thi các bước tuần tự\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            break;\n        case 'verify_product_in_cart':\n            await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        \n        case 'verify_toast_message':\n            await page.waitForSelector('.toast-info');\n            const message = await page.$eval('.toast-info', el => el.textContent);\n            expect(message).to.include(test.expectedResult);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-btn');\n            await page.click('.checkout-btn');\n            break;\n        \n        case 'verify_url':\n            await page.waitForNavigation();\n            expect(page.url()).to.equal(test.expectedResult);\n            break;\n    }\n}\nif (testCase.id === 'GH_001') {\n    // await page.waitForSelector('.header-cart-link.is-small');\n    // await page.click('.header-cart-link.is-small');\n    await page.waitForSelector('.woocommerce-info.message-wrapper');\n    const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n    // await page.waitForSelector('.woocommerce');\n    // const errorText = await page.$eval('.woocommerce', el => el.textContent);\n    // expect(errorText).to.include(testCase.expectedResult);\n}else if (testCase.id === 'GH_002'){\n    await page.waitForSelector('[role=\"alert\"]');\n    const errorText = await page.$eval('[role=\"alert\"]', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n}",
              "err": {
                "message": "Error: Navigating frame was detached",
                "estack": "Error: Navigating frame was detached\n    at #onFrameDetached (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\cdp\\LifecycleWatcher.js:103:47)\n    at E:\\Working\\Testing\\puppeteer-testing\\node_modules\\puppeteer-core\\lib\\cjs\\third_party\\mitt\\mitt.js:62:7\n    at Array.map (<anonymous>)\n    at Object.emit (node_modules\\puppeteer-core\\lib\\cjs\\third_party\\mitt\\mitt.js:61:20)\n    at CdpFrame.emit (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\common\\EventEmitter.js:83:23)\n    at #removeFramesRecursively (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\cdp\\FrameManager.js:455:15)\n    at #onClientDisconnect (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\cdp\\FrameManager.js:99:42)",
                "diff": null
              },
              "uuid": "06375dc5-f8ef-4ce5-a81d-ca8c9474be21",
              "parentUUID": "c18b4a8a-043d-44f9-a8ae-23fb21971ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra thông tin “Giỏ hàng” có sản phẩm vừa thêm",
              "fullTitle": "Cart Functionality Kiểm tra thông tin “Giỏ hàng” có sản phẩm vừa thêm",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(test.productUrl);\n}\n// Thực thi các bước tuần tự\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            break;\n        case 'verify_product_in_cart':\n            await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        \n        case 'verify_toast_message':\n            await page.waitForSelector('.toast-info');\n            const message = await page.$eval('.toast-info', el => el.textContent);\n            expect(message).to.include(test.expectedResult);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-btn');\n            await page.click('.checkout-btn');\n            break;\n        \n        case 'verify_url':\n            await page.waitForNavigation();\n            expect(page.url()).to.equal(test.expectedResult);\n            break;\n    }\n}\nif (testCase.id === 'GH_001') {\n    // await page.waitForSelector('.header-cart-link.is-small');\n    // await page.click('.header-cart-link.is-small');\n    await page.waitForSelector('.woocommerce-info.message-wrapper');\n    const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n    // await page.waitForSelector('.woocommerce');\n    // const errorText = await page.$eval('.woocommerce', el => el.textContent);\n    // expect(errorText).to.include(testCase.expectedResult);\n}else if (testCase.id === 'GH_002'){\n    await page.waitForSelector('[role=\"alert\"]');\n    const errorText = await page.$eval('[role=\"alert\"]', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n}",
              "err": {
                "message": "Error: Attempted to use detached Frame 'E317ECC37B4DF37A970F151E0B6317F0'.",
                "estack": "Error: Attempted to use detached Frame 'E317ECC37B4DF37A970F151E0B6317F0'.\n    at CdpFrame.<anonymous> (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\util\\decorators.js:107:23)\n    at CdpPage.goto (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\api\\Page.js:574:43)\n    at Context.<anonymous> (tests\\cart.test.js:57:36)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "de9b9f33-2d46-4c4f-8f4d-4c983087e93d",
              "parentUUID": "c18b4a8a-043d-44f9-a8ae-23fb21971ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra thông tin số lượng trong “Giỏ hàng” tăng khi sản phẩm vừa “Thêm vào giỏ hàng” đã có trong giỏ hàng",
              "fullTitle": "Cart Functionality Kiểm tra thông tin số lượng trong “Giỏ hàng” tăng khi sản phẩm vừa “Thêm vào giỏ hàng” đã có trong giỏ hàng",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(test.productUrl);\n}\n// Thực thi các bước tuần tự\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            break;\n        case 'verify_product_in_cart':\n            await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        \n        case 'verify_toast_message':\n            await page.waitForSelector('.toast-info');\n            const message = await page.$eval('.toast-info', el => el.textContent);\n            expect(message).to.include(test.expectedResult);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-btn');\n            await page.click('.checkout-btn');\n            break;\n        \n        case 'verify_url':\n            await page.waitForNavigation();\n            expect(page.url()).to.equal(test.expectedResult);\n            break;\n    }\n}\nif (testCase.id === 'GH_001') {\n    // await page.waitForSelector('.header-cart-link.is-small');\n    // await page.click('.header-cart-link.is-small');\n    await page.waitForSelector('.woocommerce-info.message-wrapper');\n    const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n    // await page.waitForSelector('.woocommerce');\n    // const errorText = await page.$eval('.woocommerce', el => el.textContent);\n    // expect(errorText).to.include(testCase.expectedResult);\n}else if (testCase.id === 'GH_002'){\n    await page.waitForSelector('[role=\"alert\"]');\n    const errorText = await page.$eval('[role=\"alert\"]', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n}",
              "err": {
                "message": "Error: Attempted to use detached Frame 'E317ECC37B4DF37A970F151E0B6317F0'.",
                "estack": "Error: Attempted to use detached Frame 'E317ECC37B4DF37A970F151E0B6317F0'.\n    at CdpFrame.<anonymous> (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\util\\decorators.js:107:23)\n    at CdpPage.goto (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\api\\Page.js:574:43)\n    at Context.<anonymous> (tests\\cart.test.js:57:36)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "6503a053-8069-4d0e-81a7-d2f14064a2ac",
              "parentUUID": "c18b4a8a-043d-44f9-a8ae-23fb21971ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra thông tin số lượng trong “Giỏ hàng” có đúng với số lượng chọn",
              "fullTitle": "Cart Functionality Kiểm tra thông tin số lượng trong “Giỏ hàng” có đúng với số lượng chọn",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(test.productUrl);\n}\n// Thực thi các bước tuần tự\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            break;\n        case 'verify_product_in_cart':\n            await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        \n        case 'verify_toast_message':\n            await page.waitForSelector('.toast-info');\n            const message = await page.$eval('.toast-info', el => el.textContent);\n            expect(message).to.include(test.expectedResult);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-btn');\n            await page.click('.checkout-btn');\n            break;\n        \n        case 'verify_url':\n            await page.waitForNavigation();\n            expect(page.url()).to.equal(test.expectedResult);\n            break;\n    }\n}\nif (testCase.id === 'GH_001') {\n    // await page.waitForSelector('.header-cart-link.is-small');\n    // await page.click('.header-cart-link.is-small');\n    await page.waitForSelector('.woocommerce-info.message-wrapper');\n    const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n    // await page.waitForSelector('.woocommerce');\n    // const errorText = await page.$eval('.woocommerce', el => el.textContent);\n    // expect(errorText).to.include(testCase.expectedResult);\n}else if (testCase.id === 'GH_002'){\n    await page.waitForSelector('[role=\"alert\"]');\n    const errorText = await page.$eval('[role=\"alert\"]', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n}",
              "err": {
                "message": "Error: Attempted to use detached Frame 'E317ECC37B4DF37A970F151E0B6317F0'.",
                "estack": "Error: Attempted to use detached Frame 'E317ECC37B4DF37A970F151E0B6317F0'.\n    at CdpFrame.<anonymous> (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\util\\decorators.js:107:23)\n    at CdpPage.goto (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\api\\Page.js:574:43)\n    at Context.<anonymous> (tests\\cart.test.js:53:36)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "07fe2ff7-119f-4f1b-84b4-4d7cad343b69",
              "parentUUID": "c18b4a8a-043d-44f9-a8ae-23fb21971ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra thông báo “Xóa sản phẩm thành công”",
              "fullTitle": "Cart Functionality Kiểm tra thông báo “Xóa sản phẩm thành công”",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(test.productUrl);\n}\n// Thực thi các bước tuần tự\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            break;\n        case 'verify_product_in_cart':\n            await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        \n        case 'verify_toast_message':\n            await page.waitForSelector('.toast-info');\n            const message = await page.$eval('.toast-info', el => el.textContent);\n            expect(message).to.include(test.expectedResult);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-btn');\n            await page.click('.checkout-btn');\n            break;\n        \n        case 'verify_url':\n            await page.waitForNavigation();\n            expect(page.url()).to.equal(test.expectedResult);\n            break;\n    }\n}\nif (testCase.id === 'GH_001') {\n    // await page.waitForSelector('.header-cart-link.is-small');\n    // await page.click('.header-cart-link.is-small');\n    await page.waitForSelector('.woocommerce-info.message-wrapper');\n    const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n    // await page.waitForSelector('.woocommerce');\n    // const errorText = await page.$eval('.woocommerce', el => el.textContent);\n    // expect(errorText).to.include(testCase.expectedResult);\n}else if (testCase.id === 'GH_002'){\n    await page.waitForSelector('[role=\"alert\"]');\n    const errorText = await page.$eval('[role=\"alert\"]', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n}",
              "err": {
                "message": "ReferenceError: test is not defined",
                "estack": "ReferenceError: test is not defined\n    at Context.<anonymous> (tests\\cart.test.js:46:45)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "240fee7f-9d1a-4054-ba3e-9b30c3753ff9",
              "parentUUID": "c18b4a8a-043d-44f9-a8ae-23fb21971ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra khi nhấn “Tiến hành thanh toán” sẽ chuyển đến trang thanh toán",
              "fullTitle": "Cart Functionality Kiểm tra khi nhấn “Tiến hành thanh toán” sẽ chuyển đến trang thanh toán",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(test.productUrl);\n}\n// Thực thi các bước tuần tự\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            break;\n        case 'verify_product_in_cart':\n            await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        \n        case 'verify_toast_message':\n            await page.waitForSelector('.toast-info');\n            const message = await page.$eval('.toast-info', el => el.textContent);\n            expect(message).to.include(test.expectedResult);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-btn');\n            await page.click('.checkout-btn');\n            break;\n        \n        case 'verify_url':\n            await page.waitForNavigation();\n            expect(page.url()).to.equal(test.expectedResult);\n            break;\n    }\n}\nif (testCase.id === 'GH_001') {\n    // await page.waitForSelector('.header-cart-link.is-small');\n    // await page.click('.header-cart-link.is-small');\n    await page.waitForSelector('.woocommerce-info.message-wrapper');\n    const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n    // await page.waitForSelector('.woocommerce');\n    // const errorText = await page.$eval('.woocommerce', el => el.textContent);\n    // expect(errorText).to.include(testCase.expectedResult);\n}else if (testCase.id === 'GH_002'){\n    await page.waitForSelector('[role=\"alert\"]');\n    const errorText = await page.$eval('[role=\"alert\"]', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedResult);\n}",
              "err": {
                "message": "ReferenceError: test is not defined",
                "estack": "ReferenceError: test is not defined\n    at Context.<anonymous> (tests\\cart.test.js:46:45)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "3f3e0947-5964-4503-94b4-778a8aefbb9d",
              "parentUUID": "c18b4a8a-043d-44f9-a8ae-23fb21971ffe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa135a15-f89d-4cb0-9d25-c81b6cb05279"
          ],
          "failures": [
            "06375dc5-f8ef-4ce5-a81d-ca8c9474be21",
            "de9b9f33-2d46-4c4f-8f4d-4c983087e93d",
            "6503a053-8069-4d0e-81a7-d2f14064a2ac",
            "07fe2ff7-119f-4f1b-84b4-4d7cad343b69",
            "240fee7f-9d1a-4054-ba3e-9b30c3753ff9",
            "3f3e0947-5964-4503-94b4-778a8aefbb9d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9034,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.5.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}