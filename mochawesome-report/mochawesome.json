{
  "stats": {
    "suites": 1,
    "tests": 21,
    "passes": 17,
    "pending": 0,
    "failures": 4,
    "start": "2025-06-21T19:47:34.189Z",
    "end": "2025-06-21T19:51:10.788Z",
    "duration": 216599,
    "testsRegistered": 21,
    "passPercent": 80.95238095238095,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8619fa6c-1765-4be0-b6c7-6905908307fd",
      "title": "",
      "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\search.test.js",
      "file": "\\tests\\search.test.js",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 15,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const chai = await import('chai');\nexpect = chai.expect;",
          "err": {},
          "uuid": "5c848e19-0feb-419f-9e47-d0d2f40f7a84",
          "parentUUID": "8619fa6c-1765-4be0-b6c7-6905908307fd",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
          "title": "Search Functionality",
          "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\search.test.js",
          "file": "\\tests\\search.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Search Functionality\"",
              "fullTitle": "Search Functionality \"before all\" hook in \"Search Functionality\"",
              "timedOut": false,
              "duration": 685,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "browser = await puppeteer.launch({\n  headless: false,\n  args: ['--start-maximized'],\n});\npage = await browser.newPage();\nawait page.setViewport({ width: 1280, height: 720 });",
              "err": {},
              "uuid": "929111c3-5a84-4333-b011-cfb1080aea6b",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Search Functionality\"",
              "fullTitle": "Search Functionality \"after all\" hook in \"Search Functionality\"",
              "timedOut": false,
              "duration": 616,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.close();",
              "err": {},
              "uuid": "613009e0-e092-42e5-b41e-83866ce27cd8",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Kiểm tra hiển thị khi bỏ trống mục tìm kiếm",
              "fullTitle": "Search Functionality Kiểm tra hiển thị khi bỏ trống mục tìm kiếm",
              "timedOut": false,
              "duration": 10524,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "eb922b40-e007-48e3-9dc4-ccccb286b891",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra danh mục sản phẩm khi khi nhập data không có trong dữ liệu",
              "fullTitle": "Search Functionality Kiểm tra danh mục sản phẩm khi khi nhập data không có trong dữ liệu",
              "timedOut": false,
              "duration": 8605,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "4e8f3f84-41b8-46d3-a011-4f55cac294e0",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra danh mục sản phẩm khi nhập data có trong cơ sở dữ liệu",
              "fullTitle": "Search Functionality Kiểm tra danh mục sản phẩm khi nhập data có trong cơ sở dữ liệu",
              "timedOut": false,
              "duration": 16327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "f886f10e-ef08-4a8d-863d-8ed817ff2bf1",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra hiển thị gợi ý khi nhập tên sản phẩm đúng",
              "fullTitle": "Search Functionality Kiểm tra hiển thị gợi ý khi nhập tên sản phẩm đúng",
              "timedOut": false,
              "duration": 6308,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "a5ffe43c-ebfa-47ad-9e67-1ca7f64cc65a",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra hiển thị “Không có sản phẩm nào” trong khung gợi ý khi nhập tên sản phẩm không có trong cửa hàng",
              "fullTitle": "Search Functionality Kiểm tra hiển thị “Không có sản phẩm nào” trong khung gợi ý khi nhập tên sản phẩm không có trong cửa hàng",
              "timedOut": false,
              "duration": 3330,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "f115437b-69f5-4bdd-9155-fa4bdf8cbbe2",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra hiển thị gợi ý khi nhập tên sản phẩm in hoa",
              "fullTitle": "Search Functionality Kiểm tra hiển thị gợi ý khi nhập tên sản phẩm in hoa",
              "timedOut": false,
              "duration": 10448,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "96a45acf-13c4-4b76-bb0e-f7db8de1f54e",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "So sánh kết quả tìm kiếm khi nhập tên sản phẩm in hoa, in thường",
              "fullTitle": "Search Functionality So sánh kết quả tìm kiếm khi nhập tên sản phẩm in hoa, in thường",
              "timedOut": false,
              "duration": 23484,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "684a66ff-e163-429e-859f-92ee3408358b",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "So sánh hiển thị gợi ý khi nhập tên sản phẩm có dấu, không dấu ",
              "fullTitle": "Search Functionality So sánh hiển thị gợi ý khi nhập tên sản phẩm có dấu, không dấu ",
              "timedOut": false,
              "duration": 8927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "b22c9b61-6926-4537-a032-ffe39f02ed9e",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "So sánh kết quả khi nhập tên sản phẩm có dấu, không dấu",
              "fullTitle": "Search Functionality So sánh kết quả khi nhập tên sản phẩm có dấu, không dấu",
              "timedOut": false,
              "duration": 19297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "7ddfbf6b-61e7-4b88-b884-93e0da9915d6",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra khi nhập tên sản phẩm quá dài (trên 32)",
              "fullTitle": "Search Functionality Kiểm tra khi nhập tên sản phẩm quá dài (trên 32)",
              "timedOut": false,
              "duration": 9020,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "e2c405d4-d3e5-417d-a776-78222fd63bf8",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "So sánh kết quả khi khi nhập tên sản phẩm có nhiều hơn 1 khoảng trắng",
              "fullTitle": "Search Functionality So sánh kết quả khi khi nhập tên sản phẩm có nhiều hơn 1 khoảng trắng",
              "timedOut": false,
              "duration": 20103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "ca6b6955-e446-4437-84df-edf9d97ac8e7",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "So sánh hiển thị gợi ý khi nhập tên sản phẩm khi có nhiều hơn 1 khoảng trắng",
              "fullTitle": "Search Functionality So sánh hiển thị gợi ý khi nhập tên sản phẩm khi có nhiều hơn 1 khoảng trắng",
              "timedOut": false,
              "duration": 9438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "6bdfca97-caa2-4497-af99-5f73db9f3c22",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "So sánh kết quả khi nhập tên sản phẩm không có khoảng trắng",
              "fullTitle": "Search Functionality So sánh kết quả khi nhập tên sản phẩm không có khoảng trắng",
              "timedOut": false,
              "duration": 16669,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {
                "message": "AssertionError: expected '\\n\\t\\t\\n\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\…' to equal ''",
                "estack": "AssertionError: expected '\\n\\t\\t\\n\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\…' to equal ''\n    at Context.<anonymous> (tests\\search.test.js:147:37)",
                "diff": "- \n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tLike New\t\t                   \n- \t\t            \n-              \tiPhone 15 Pro Max 1TB – Like new\n- \t27.000.000 ₫\n-     \n-                          6.7\" Retina XDR\n-                                         \n-                     A17 Pro Bionic \n-                         \n-                 \n-                                     \n-                         8 GB  - \n-                         1 TB\n-                                         \n-     \n-     \t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tLike New\t\t                   \n- \t\t            \n-              \tiPhone 15 Plus 256GB – Like new\n- \t18.300.000 ₫\n-     \n-                          6.7\" Retina XDR\n-                                         \n-                     A16 Bionic \n-                         \n-                 \n-                                     \n-                         6 GB  - \n-                         256 GB\n-                                         \n-     \n-     \t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tLike New\t\t                   \n- \t\t            \n-              \tiPhone 15 Pro 512GB – Like new\n- \t21.000.000 ₫\n-     \n-                          6.1\" Retina XDR\n-                                         \n-                     A17 Pro Bionic \n-                         \n-                 \n-                                     \n-                         8 GB  - \n-                         512 GB\n-                                         \n-     \n-     \t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tLike New\t\t                   \n- \t\t            \n-              \tiPhone 15 128GB – Like new\n- \t14.000.000 ₫\n-     \n-                          6.1\" Retina XDR\n-                                         \n-                     A16 Bionic \n-                         \n-                 \n-                                     \n-                         6 GB  - \n-                         128 GB\n-                                         \n-     \n-     \t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tLike New\t\t                   \n- \t\t            \n-              \tiPhone 15 Pro 256GB – Like new\n- \t19.900.000 ₫\n-     \n-                          6.1\" Retina XDR\n-                                         \n-                     A17 Pro Bionic \n-                         \n-                 \n-                                     \n-                         8 GB  - \n-                         256 GB\n-                                         \n-     \n-     \t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tLike New\t\t                   \n- \t\t            \n-              \tiPhone 15 Pro 128GB – Like new\n- \t18.200.000 ₫\n-     \n-                          6.1\" Retina XDR\n-                                         \n-                     A17 Pro Bionic \n-                         \n-                 \n-                                     \n-                         8 GB  - \n-                         128 GB\n-                                         \n-     \n-     \t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tLike New\t\t                   \n- \t\t            \n-              \tiPhone 15 Plus 128GB – Like new\n- \t16.300.000 ₫\n-     \n-                          6.7\" Retina XDR\n-                                         \n-                     A16 Bionic \n-                         \n-                 \n-                                     \n-                         6 GB  - \n-                         128 GB\n-                                         \n-     \n-     \t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tLike New\t\t                   \n- \t\t            \n-              \tiPhone 15 256GB – Like new\n- \t14.900.000 ₫\n-     \n-                          6.1\" Retina XDR\n-                                         \n-                     A16 Bionic \n-                         \n-                 \n-                                     \n-                         6 GB  - \n-                         256 GB\n-                                         \n-     \n-     \t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tLike New\t\t                   \n- \t\t            \n-              \tiPhone 15 Pro Max 512GB – Like new\n- \t24.800.000 ₫\n-     \n-                          6.7\" Retina XDR\n-                                         \n-                     A17 Pro Bionic \n-                         \n-                 \n-                                     \n-                         8 GB  - \n-                         512 GB\n-                                         \n-     \n-     \t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tLike New\t\t                   \n- \t\t            \n-              \tiPhone 15 Pro Max 256GB – Like new\n- \t22.500.000 ₫\n-     \n-                          6.7\" Retina XDR\n-                                         \n-                     A17 Pro Bionic \n-                         \n-                 \n-                                     \n-                         8 GB  - \n-                         256 GB\n-                                         \n-     \n-     \t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tNew\t\t                   \n- \t\t            \n-              \tỐp Lưng iPhone 15 Pro Spigen Caseology Nano Pop\n- \t714.000 ₫\n- \t\t\t\t\t   \t\n- \t\t\t\t\t        \n- \t\t\t\t\t            \n- \t\t\t\t\t                 Giảm 10% khi mua kèm iPhone 15 Series  Sản phẩm bảo hành 6 tháng 1 đổi 1  Giao hàng miễn phí. Giao nhanh 2H tại TP HCM \t\t\t\t\t               \n- \t\t\t\t\t        \n- \t\t\t\t\t    \n- \t\t\t\t\t    \n- \t\t\t\t\t   \t\t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tNew\t\t                   \n- \t\t            \n-              \tỐp Lưng iPhone 15 Pro Max Spigen Caseology Parallax (Magfit)\n- \t894.000 ₫\n- \t\t\t\t\t   \t\n- \t\t\t\t\t        \n- \t\t\t\t\t            \n- \t\t\t\t\t                 Giảm 10% khi mua kèm iPhone 15 Series  Sản phẩm bảo hành 6 tháng 1 đổi 1  Giao hàng miễn phí. Giao nhanh 2H tại TP HCM \t\t\t\t\t               \n- \t\t\t\t\t        \n- \t\t\t\t\t    \n- \t\t\t\t\t    \n- \t\t\t\t\t   \t\t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tNew\t\t                   \n- \t\t            \n-              \tỐp Lưng Spigen Cyrill iPhone 15 Pro Max Kajuk Mag (Magsafe)\n- \t770.000 ₫\n- \t\t\t\t\t   \t\n- \t\t\t\t\t        \n- \t\t\t\t\t            \n- \t\t\t\t\t                 Giảm 10% khi mua kèm iPhone 15 Series  Sản phẩm bảo hành 6 tháng 1 đổi 1  Giao hàng miễn phí. Giao nhanh 2H tại TP HCM \t\t\t\t\t               \n- \t\t\t\t\t        \n- \t\t\t\t\t    \n- \t\t\t\t\t    \n- \t\t\t\t\t   \t\t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tNew\t\t                   \n- \t\t            \n-              \tỐp Lưng iPhone 15 Pro Spigen Core Armor (Magfit)\n- \t650.000 ₫\n- \t\t\t\t\t   \t\n- \t\t\t\t\t        \n- \t\t\t\t\t            \n- \t\t\t\t\t                 Giảm 10% khi mua kèm iPhone 15 Series  Sản phẩm bảo hành 6 tháng 1 đổi 1  Giao hàng miễn phí. Giao nhanh 2H tại TP HCM \t\t\t\t\t               \n- \t\t\t\t\t        \n- \t\t\t\t\t    \n- \t\t\t\t\t    \n- \t\t\t\t\t   \t\t\t\n- \t;\n- \t\t\n- \n- \t\t\t\n- \t\t\t\t\n- \t\t\t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\n- \n- \t\n- \t\t\t\n- \t\t\n- \t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n- \t\t\t\t\t\t\t\n- \t\t\t\n-                   \n- \t\t\n- \n- \t\t\n- \t\t\t out of 5\n- \t\t            \n-           \t\t\t\tNew\t\t                   \n- \t\t            \n-              \tỐp Lưng iPhone 15 Pro Max Spigen Ultra Hybrid S\n- \t1.194.000 ₫\n- \t\t\t\t\t   \t\n- \t\t\t\t\t        \n- \t\t\t\t\t            \n- \t\t\t\t\t                 Giảm 10% khi mua kèm iPhone 15 Series  Sản phẩm bảo hành 6 tháng 1 đổi 1  Giao hàng miễn phí. Giao nhanh 2H tại TP HCM \t\t\t\t\t               \n- \t\t\t\t\t        \n- \t\t\t\t\t    \n- \t\t\t\t\t    \n- \t\t\t\t\t   \t\t\t\n- \t\n"
              },
              "uuid": "8278eb6d-baa6-4362-86d6-b7ae4dc3f0f5",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "So sánh hiển thị gợi ý khi nhập tên sản phẩm không có khoảng trắng",
              "fullTitle": "Search Functionality So sánh hiển thị gợi ý khi nhập tên sản phẩm không có khoảng trắng",
              "timedOut": false,
              "duration": 7764,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {
                "message": "AssertionError: expected 'Ốp Lưng Spigen iPhone 15 Pro Slim Arm…' to equal 'Không có sản phẩm nào.;'",
                "estack": "AssertionError: expected 'Ốp Lưng Spigen iPhone 15 Pro Slim Arm…' to equal 'Không có sản phẩm nào.;'\n    at Context.<anonymous> (tests\\search.test.js:147:37)",
                "diff": "- Ốp Lưng Spigen iPhone 15 Pro Slim Armor CS (Magfit)565.000 ₫Ốp Lưng Spigen iPhone 15 Pro Max Tough Armor (MagFit)950.000 ₫Ốp Lưng Spigen Cyrill iPhone 15 Pro Max Kajuk Mag (Magsafe)770.000 ₫Ốp Lưng Magsafe iPhone 15 Pro Spigen Crystal Hybrid779.000 ₫Ốp Lưng iPhone 15 Series Spigen Liquid Crystal Clear260.000 ₫Ốp Lưng iPhone 15 Pro Spigen Core Armor (Magfit)650.000 ₫Ốp Lưng iPhone 15 Pro Spigen Caseology Nano Pop714.000 ₫Ốp Lưng iPhone 15 Pro Max Spigen Ultra Hybrid S1.194.000 ₫Ốp Lưng iPhone 15 Pro Max Spigen Caseology Parallax (Magfit)894.000 ₫Ốp Lưng iPhone 15 Plus Spigen Core Armor335.000 ₫Lens Camera iPhone 15 Pro Mipow Kingbull400.000 ₫Lens Camera iPhone 15 Plus Mipow Kingbull400.000 ₫iPhone 15 Pro Max 512GB - Like new24.800.000 ₫iPhone 15 Pro Max 512GB29.100.000 ₫iPhone 15 Pro Max 256GB - Like new22.500.000 ₫iPhone 15 Pro Max 256GB24.300.000 ₫iPhone 15 Pro Max 1TB - Like new27.000.000 ₫iPhone 15 Pro 512GB - Like new21.000.000 ₫iPhone 15 Pro 256GB - Like new19.900.000 ₫iPhone 15 Pro 256GB22.500.000 ₫iPhone 15 Pro 128GB - Like new18.200.000 ₫iPhone 15 Pro 128GB20.500.000 ₫iPhone 15 Plus 512GB24.600.000 ₫iPhone 15 Plus 256GB - Like new18.300.000 ₫iPhone 15 Plus 256GB20.600.000 ₫iPhone 15 Plus 128GB - Like new16.300.000 ₫iPhone 15 Plus 128GB18.200.000 ₫iPhone 15 256GB - Like new14.900.000 ₫iPhone 15 256GB17.700.000 ₫iPhone 15 128GB - Like new14.000.000 ₫iPhone 15 128GB15.600.000 ₫Cường Lực iPhone 15 Series Mipow Kingbull (3D)490.000 ₫Cường Lực Chống Vân Tay iPhone 15 Series (HD)450.000 ₫Cường Lực Chống Nhìn Trộm iPhone 15 Series450.000 ₫;\n+ Không có sản phẩm nào.;\n"
              },
              "uuid": "2728e3b7-1f26-4b03-9f3e-dbf0187ade02",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra phần lọc kế quả tìm kiếm theo giá",
              "fullTitle": "Search Functionality Kiểm tra phần lọc kế quả tìm kiếm theo giá",
              "timedOut": false,
              "duration": 7702,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "21896d9f-32ab-497e-93e0-f61b7d6ed396",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra phần lọc kế quả tìm kiếm theo giá",
              "fullTitle": "Search Functionality Kiểm tra phần lọc kế quả tìm kiếm theo giá",
              "timedOut": false,
              "duration": 6589,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "27c3c688-68df-45f2-91a7-f01c7e457e62",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra phần lọc khi chọn tiêu chí không có",
              "fullTitle": "Search Functionality Kiểm tra phần lọc khi chọn tiêu chí không có",
              "timedOut": false,
              "duration": 4762,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "cbc1f817-11c3-4ba1-9f84-ccefac3a700e",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra khi nhấn xóa tất cả các tiêu chí lọc đã chọn",
              "fullTitle": "Search Functionality Kiểm tra khi nhấn xóa tất cả các tiêu chí lọc đã chọn",
              "timedOut": false,
              "duration": 6516,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {
                "message": "AssertionError: Danh sách sản phẩm sau khi reset giống với ban đầu!: expected [ 'iPhone 14 Pro 256GB – CPO', …(14) ] to not deeply equal [ 'iPhone 14 Pro 256GB – CPO', …(14) ]",
                "estack": "AssertionError: Danh sách sản phẩm sau khi reset giống với ban đầu!: expected [ 'iPhone 14 Pro 256GB – CPO', …(14) ] to not deeply equal [ 'iPhone 14 Pro 256GB – CPO', …(14) ]\n    at Context.<anonymous> (tests\\search.test.js:197:47)",
                "diff": ""
              },
              "uuid": "442bf1b2-d6e2-4a38-9ccf-289fffedff2b",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra sắp xép kết quả theo điểm đánh giá",
              "fullTitle": "Search Functionality Kiểm tra sắp xép kết quả theo điểm đánh giá",
              "timedOut": false,
              "duration": 6208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "71544605-f44f-4c7e-9ca8-d644472520a2",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra sắp xép kết quả theo điểm đánh giá tú thấp đến cao",
              "fullTitle": "Search Functionality Kiểm tra sắp xép kết quả theo điểm đánh giá tú thấp đến cao",
              "timedOut": false,
              "duration": 6447,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {},
              "uuid": "36cdb31c-7432-4023-ae7b-f8a3d5416f1c",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kiểm tra sắp xép kết quả theo điểm đánh giá tú cao đến thấp",
              "fullTitle": "Search Functionality Kiểm tra sắp xép kết quả theo điểm đánh giá tú cao đến thấp",
              "timedOut": false,
              "duration": 6775,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "switch (testCase.category) {\n    case 'direct_search':\n        await actions.performSearch(testCase.data.searchTerm, testCase.id);\n        await page.click('button[type=\"submit\"]');\n        await waitForElement(page, '.shop-container', { timeout: config.timeout });\n        if(testCase.alert){\n          const ResultText = await page.$eval('.shop-container', el => el.textContent);\n          expect(ResultText).to.include(testCase.expectedResult);\n        }else{\n          const isProductFound = await actions.is_includeExpectedResult('.product-small.box', testCase.expectedResult);\n          expect(isProductFound, `❌FAILED: \"${testCase.data.searchTerm}\" không được tìm thấy trong kết quả`).to.be.true;\n        }\n    break;\n    case 'suggestion':\n        // await page.type('#search-input', test.data.searchTerm);\n        // await page.waitForSelector('.autocomplete-suggestions', { visible: true });\n        await actions.performSearch(testCase.data.searchTerm);\n        const suggestionText = await page.$eval('.autocomplete-suggestions', el => el.textContent);\n        expect(suggestionText).to.include(testCase.expectedResult);\n        break;\n    case 'comparison':\n        await actions.performSearch(testCase.data.searchTerm1);\n        const results1 = await actions.getSearchResultsText(testCase.press_search);\n        await page.click('input[type=\"search\"]', { clickCount: 3 });\n        await page.type('input[type=\"search\"]', testCase.data.searchTerm2);\n        await waitForElement(page, '.autocomplete-suggestions', { timeout: config.timeout });\n        const results2 = await actions.getSearchResultsText(testCase.press_search);\n        expect(results1).to.equal(results2);\n      break;\n    case 'filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      // Lấy tất cả các sản phẩm trên trang hiện tại\n      const productElements = await page.$$('.product-small');\n      console.log(`Tìm thấy ${productElements.length} sản phẩm trên trang.`);\n      // Nếu không có sản phẩm nào, test vẫn pass\n      if (productElements.length === 0) {\n          console.log('Không có sản phẩm nào trong khoảng giá này, test được coi là pass.');\n          return;\n      }\n        // Dùng vòng lặp để kiểm tra giá của từng sản phẩm\n        for (let i = 0; i < productElements.length; i++) {\n          const product = productElements[i];\n          // Lấy tên sản phẩm để log cho rõ ràng\n          const titleElement = await product.$('.product-title a');\n          const title = await titleElement.evaluate(el => el.textContent);\n          // Lấy giá sản phẩm\n          const priceElement = await product.$('.price-wrapper .woocommerce-Price-amount');\n          const priceText = await priceElement.evaluate(el => el.textContent);\n          // Chuyển giá sang dạng số\n          const price = parsePrice(priceText);\n          \n          console.log(`Kiểm tra sản phẩm: \"${title}\" - Giá: ${price}đ`);\n          // Khẳng định giá phải nằm trong khoảng đã định\n          expect(price).to.be.at.least(testCase.data.min_price, `Giá của \"${title}\" (${price}) thấp hơn mức tối thiểu ${testCase.data.min_price}`);\n          expect(price).to.be.at.most(testCase.data.max_price, `Giá của \"${title}\" (${price}) cao hơn mức tối đa ${testCase.data.max_price}`);\n        } \n    break;\n    case 'remove_filter': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&min_price=${testCase.data.min_price}&max_price=${testCase.data.max_price}`);\n      await page.waitForSelector('.product-small');\n      const initialTitles = await getProductTitles();     \n      console.log(initialTitles);\n      const resetButtonSelector = '.reset.isures-reset--filter';\n      await page.click(resetButtonSelector);\n      const resetTitles = await getProductTitles();\n      console.log(resetTitles); \n      expect(resetTitles).not.to.deep.equal(initialTitles, \"Danh sách sản phẩm sau khi reset giống với ban đầu!\");\n    break;\n    case 'filter_none': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&filtero-cpu=1813`);\n      await page.waitForSelector('.message-container.container.medium-text-center');\n      const AlertText = await page.$eval('.message-container.container.medium-text-center', el => el.textContent);\n      expect(AlertText).to.include(testCase.expectedResult);\n    break;\n    case 'rating': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=rating`);\n      await page.waitForSelector('.product-small');\n      const extractedRatings = await getRatingScores();\n      console.log('Điểm đánh giá trích xuất từ trang:', extractedRatings);\n      // 2. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      // [...extractedRatings] tạo ra một bản sao của mảng\n      // .sort((a, b) => b - a) sắp xếp các số theo thứ tự giảm dần (từ cao đến thấp)\n      const correctlySortedRatings = [...extractedRatings].sort((a, b) => b - a);\n      console.log('Điểm đánh giá theo thứ tự đúng:', correctlySortedRatings);\n      // 3. Khẳng định rằng danh sách lấy từ trang phải giống hệt danh sách \"đáp án\"\n      expect(extractedRatings).to.deep.equal(correctlySortedRatings, \"Sản phẩm không được sắp xếp đúng theo điểm đánh giá từ cao đến thấp!\");\n    break;\n    case 'price': \n      await page.goto(`${config.searchUrl}${testCase.data.searchTerm}&post_type=product&orderby=${testCase.order_by}`);\n      await page.waitForSelector('.product-small');\n      await page.select('select.orderby', testCase.order_by);\n      // 2. Lấy danh sách giá từ các sản phẩm trên trang\n      const extractedPrices = await getProductPrices();\n      console.log('Giá trích xuất từ trang:', extractedPrices);\n      // 3. Tạo một bản sao của danh sách và tự sắp xếp nó để làm \"đáp án\"\n      const correctlySortedPrices = [...extractedPrices];\n      \n      if (testCase.order_by === 'price-desc') {\n        correctlySortedPrices.sort((a, b) => b - a); // Sắp xếp giảm dần\n        console.log('Đáp án đúng (giảm dần):', correctlySortedPrices);\n      } else {\n        correctlySortedPrices.sort((a, b) => a - b); // Sắp xếp tăng dần\n        console.log('Đáp án đúng (tăng dần):', correctlySortedPrices);\n      }\n      const errorMessage = `Sản phẩm không được sắp xếp đúng theo thứ tự`;\n      expect(extractedPrices).to.deep.equal(correctlySortedPrices, errorMessage);\n    break;\n}",
              "err": {
                "message": "AssertionError: Sản phẩm không được sắp xếp đúng theo thứ tự: expected [ 36500000, 33800000, 33800000, …(12) ] to deeply equal [ 36500000, 33800000, 33800000, …(12) ]",
                "estack": "AssertionError: Sản phẩm không được sắp xếp đúng theo thứ tự: expected [ 36500000, 33800000, 33800000, …(12) ] to deeply equal [ 36500000, 33800000, 33800000, …(12) ]\n    at Context.<anonymous> (tests\\search.test.js:243:47)",
                "diff": " [\n   36500000\n   33800000\n   33800000\n+   30900000\n   30700000\n-   30900000\n   29100000\n   28700000\n   27400000\n+   27200000\n   27000000\n   27000000\n-   24300000\n-   27200000\n   25900000\n   24800000\n   24600000\n+   24300000\n ]\n"
              },
              "uuid": "972d5d0e-5cbe-475e-8c09-9c916b250156",
              "parentUUID": "76fa8a1d-a8c4-4393-8f02-7584eca92118",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb922b40-e007-48e3-9dc4-ccccb286b891",
            "4e8f3f84-41b8-46d3-a011-4f55cac294e0",
            "f886f10e-ef08-4a8d-863d-8ed817ff2bf1",
            "a5ffe43c-ebfa-47ad-9e67-1ca7f64cc65a",
            "f115437b-69f5-4bdd-9155-fa4bdf8cbbe2",
            "96a45acf-13c4-4b76-bb0e-f7db8de1f54e",
            "684a66ff-e163-429e-859f-92ee3408358b",
            "b22c9b61-6926-4537-a032-ffe39f02ed9e",
            "7ddfbf6b-61e7-4b88-b884-93e0da9915d6",
            "e2c405d4-d3e5-417d-a776-78222fd63bf8",
            "ca6b6955-e446-4437-84df-edf9d97ac8e7",
            "6bdfca97-caa2-4497-af99-5f73db9f3c22",
            "21896d9f-32ab-497e-93e0-f61b7d6ed396",
            "27c3c688-68df-45f2-91a7-f01c7e457e62",
            "cbc1f817-11c3-4ba1-9f84-ccefac3a700e",
            "71544605-f44f-4c7e-9ca8-d644472520a2",
            "36cdb31c-7432-4023-ae7b-f8a3d5416f1c"
          ],
          "failures": [
            "8278eb6d-baa6-4362-86d6-b7ae4dc3f0f5",
            "2728e3b7-1f26-4b03-9f3e-dbf0187ade02",
            "442bf1b2-d6e2-4a38-9ccf-289fffedff2b",
            "972d5d0e-5cbe-475e-8c09-9c916b250156"
          ],
          "pending": [],
          "skipped": [],
          "duration": 215243,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.5.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}