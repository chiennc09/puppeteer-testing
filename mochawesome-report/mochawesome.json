{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-06-22T10:28:11.305Z",
    "end": "2025-06-22T10:28:21.159Z",
    "duration": 9854,
    "testsRegistered": 22,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 21,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "b0c1dcc9-a149-463b-9690-132c651bb062",
      "title": "",
      "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\cart.test.js",
      "file": "\\tests\\cart.test.js",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 10,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const chai = await import('chai');\nexpect = chai.expect;",
          "err": {},
          "uuid": "6de9e7a6-e0dd-4780-aea9-12a04cd33c99",
          "parentUUID": "b0c1dcc9-a149-463b-9690-132c651bb062",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
          "title": "Cart Functionality",
          "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\cart.test.js",
          "file": "\\tests\\cart.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Cart Functionality\"",
              "fullTitle": "Cart Functionality \"before all\" hook in \"Cart Functionality\"",
              "timedOut": false,
              "duration": 384,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "browser = await puppeteer.launch({\nheadless: false,\nargs: ['--start-maximized'], // Mở trình duyệt ở chế độ toàn màn hình\n    });\npage = await browser.newPage();\nawait page.setViewport({ width: 1280, height: 720 });",
              "err": {},
              "uuid": "62e3a947-4418-47c5-a752-111de4b4510e",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Cart Functionality\"",
              "fullTitle": "Cart Functionality \"after all\" hook in \"Cart Functionality\"",
              "timedOut": false,
              "duration": 203,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.close();",
              "err": {},
              "uuid": "7a0a0d77-5722-46da-8083-f1fc60264e0b",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[GH_001] Kiểm tra “Giỏ hàng” hiện thông tin “Không có sản phẩm” khi chưa thêm sản phẩm",
              "fullTitle": "Cart Functionality [GH_001] Kiểm tra “Giỏ hàng” hiện thông tin “Không có sản phẩm” khi chưa thêm sản phẩm",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "cf35f10b-f40d-4d61-8a6a-6d790147d125",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_002] Kiểm tra thông tin “Thông báo thêm giỏ hàng thành công” khi nhấn “Thêm vào giỏ hàng”",
              "fullTitle": "Cart Functionality [GH_002] Kiểm tra thông tin “Thông báo thêm giỏ hàng thành công” khi nhấn “Thêm vào giỏ hàng”",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "2b16a4ed-750f-4770-834f-014c2e5ecafe",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_003] Kiểm tra thông tin “Giỏ hàng” có sản phẩm vừa thêm",
              "fullTitle": "Cart Functionality [GH_003] Kiểm tra thông tin “Giỏ hàng” có sản phẩm vừa thêm",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "facd8e89-47c8-4afc-9973-5a1a79aaedf7",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_005] Kiểm tra thông tin số lượng trong “Giỏ hàng” tăng khi sản phẩm vừa “Thêm vào giỏ hàng” đã có trong giỏ hàng",
              "fullTitle": "Cart Functionality [GH_005] Kiểm tra thông tin số lượng trong “Giỏ hàng” tăng khi sản phẩm vừa “Thêm vào giỏ hàng” đã có trong giỏ hàng",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "82b86e5e-8c49-4f12-a8e2-358dbcad93f5",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_004] Kiểm tra thông tin số lượng trong “Giỏ hàng” có đúng với số lượng chọn",
              "fullTitle": "Cart Functionality [GH_004] Kiểm tra thông tin số lượng trong “Giỏ hàng” có đúng với số lượng chọn",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "82fe2ffd-81e5-4a06-92ec-21a29ab350d5",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_006] Kiểm tra thông báo “Xóa sản phẩm thành công”",
              "fullTitle": "Cart Functionality [GH_006] Kiểm tra thông báo “Xóa sản phẩm thành công”",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "dc8c7f55-dd91-4a8a-af66-23b6c5d546b5",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_007] Kiểm tra phần khôi phục sản phẩm vừa xóa khỏi giỏ",
              "fullTitle": "Cart Functionality [GH_007] Kiểm tra phần khôi phục sản phẩm vừa xóa khỏi giỏ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "e65e2e13-2ddd-4788-b650-2575df0b4b66",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_008] Kiểm tra thông tin sản phẩm không còn trong giỏ khi đã ấn xóa”",
              "fullTitle": "Cart Functionality [GH_008] Kiểm tra thông tin sản phẩm không còn trong giỏ khi đã ấn xóa”",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "1ba6c678-ad29-4ccd-8217-bac6ff00e1ae",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_009] Kiểm tra thông báo cập nhật giỏ hàng thành công",
              "fullTitle": "Cart Functionality [GH_009] Kiểm tra thông báo cập nhật giỏ hàng thành công",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "429d302a-3d5b-4a19-8e7e-587bd04c7551",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_010] Kiểm tra thông tin cập nhật giỏ hàng khi nhập số lượng",
              "fullTitle": "Cart Functionality [GH_010] Kiểm tra thông tin cập nhật giỏ hàng khi nhập số lượng",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "b5ec3980-5bf6-4406-85c2-b9e5de6f4989",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_011] Kiểm tra khi nhấn “Tiến hành thanh toán” sẽ chuyển đến trang thanh toán",
              "fullTitle": "Cart Functionality [GH_011] Kiểm tra khi nhấn “Tiến hành thanh toán” sẽ chuyển đến trang thanh toán",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "979921ab-488d-473d-943c-01707bf98b74",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_012] Kiểm tra số tiền khi sử dụng mã giảm giá",
              "fullTitle": "Cart Functionality [GH_012] Kiểm tra số tiền khi sử dụng mã giảm giá",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "148d47aa-3777-467b-8a01-cfa86ef4b8e3",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_013] Kiểm tra số tiền khi không sử dụng mã giảm giá",
              "fullTitle": "Cart Functionality [GH_013] Kiểm tra số tiền khi không sử dụng mã giảm giá",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "0b3b41ea-66f5-4d6b-a9c4-c791ed50954d",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_015] Kiểm tra địa chỉ khi nhập địa chỉ nhận trong giỏ hàng",
              "fullTitle": "Cart Functionality [GH_015] Kiểm tra địa chỉ khi nhập địa chỉ nhận trong giỏ hàng",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "be2f85db-a338-4348-83c5-0b458b5c60cc",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_014] Kiểm tra địa chỉ khi thay đổi địa chỉ nhận trong giỏ hàng",
              "fullTitle": "Cart Functionality [GH_014] Kiểm tra địa chỉ khi thay đổi địa chỉ nhận trong giỏ hàng",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "95589100-0e7e-4f67-915f-0e456f44eebd",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_016] Kiểm tra thông tin cập nhật giỏ hàng khi nhập số lượng là “0”",
              "fullTitle": "Cart Functionality [GH_016] Kiểm tra thông tin cập nhật giỏ hàng khi nhập số lượng là “0”",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "4cd8fb46-ad38-4089-bd23-596c8d04d39c",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_017] Kiểm tra thông tin cập nhật giỏ hàng khi nhập số lượng là số âm",
              "fullTitle": "Cart Functionality [GH_017] Kiểm tra thông tin cập nhật giỏ hàng khi nhập số lượng là số âm",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "26ef6490-51f3-4f9d-9913-f67fc93fe07c",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_018] Kiểm tra thông tin cập nhật giỏ hàng khi nhập số lượng rất lớn",
              "fullTitle": "Cart Functionality [GH_018] Kiểm tra thông tin cập nhật giỏ hàng khi nhập số lượng rất lớn",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "576ca4f1-7b5b-4691-9748-182aaa6f8499",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_019] Kiểm tra thông tin cập nhật giỏ hàng khi nhập mã giảm giá không đúng",
              "fullTitle": "Cart Functionality [GH_019] Kiểm tra thông tin cập nhật giỏ hàng khi nhập mã giảm giá không đúng",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "b024db38-addc-4897-8b62-de3797c3ad5d",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_020] Kiểm tra khi nhập số lượng = 0 để thêm vào giỏ",
              "fullTitle": "Cart Functionality [GH_020] Kiểm tra khi nhập số lượng = 0 để thêm vào giỏ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "872cf7a2-e1b0-479d-ab0c-d0641eebfe24",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_021] Kiểm tra khi nhập số lượng là số âm để thêm vào giỏ",
              "fullTitle": "Cart Functionality [GH_021] Kiểm tra khi nhập số lượng là số âm để thêm vào giỏ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {},
              "uuid": "82935da0-44a7-46ba-aaf1-6d8369db880f",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[GH_022] Kiểm tra khi xóa số lượng để thêm vào giỏ",
              "fullTitle": "Cart Functionality [GH_022] Kiểm tra khi xóa số lượng để thêm vào giỏ",
              "timedOut": false,
              "duration": 9251,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (testCase.steps.includes('setup_add_item')) {\n    await actions.addItemToCart(testCase.productUrl);\n    await page.waitForSelector('[role=\"alert\"]');\n}\nfor (const step of testCase.steps) {\n    switch (step) {\n        case 'goto_cart':\n            await page.goto(config.cartUrl);\n            break;\n        \n        case 'goto_product':\n            await page.goto(testCase.productUrl);\n            break;\n        case 'add_to_cart':\n            await clickElement(page, '.single_add_to_cart_button');\n            await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'add_to_cart_with_quantity':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await page.click('.single_add_to_cart_button');\n            if(!testCase.is_validation){\n                await page.waitForSelector('.header-cart-link.is-small');\n            await page.click('.header-cart-link.is-small');\n            }\n            break;\n        case 'verify_product_in_cart':\n            if(!testCase.is_change_quantity_equal_0)\n                await page.waitForSelector('.product-name');\n            const productNames = await page.$$eval(\n                '.product-name', \n                (elements) => elements.map(el => el.innerText.trim())\n            );\n            const isProductFound = productNames.some(\n                productName => productName.includes(testCase.data.productName)\n            );\n            // console.log(productNames);\n            if(testCase.is_change_quantity_equal_0)\n                expect(isProductFound, `❌FAILED: Sản phẩm \"${testCase.data.productName}\"vẫn tồn tại trong giỏ hàng`).to.be.false;\n            else\n                expect(isProductFound, `❌FAILED: Không tìm thấy sản phẩm chứa \"${testCase.data.productName}\" trong giỏ hàng`).to.be.true;\n            break;\n        \n        case 'verify_product_quantity':\n            await page.waitForSelector('.woocommerce');\n            const productQuantity = await page.$eval('.input-text.qty.text', el => el.value);\n            var totalQuantity = testCase.data.quantity + testCase.data.quantity_past;\n            console.log(totalQuantity);\n            expect(productQuantity).to.equal(totalQuantity.toString());\n            break;\n        case 'change_quantity_in_cart':\n            await page.click('.input-text.qty.text', { clickCount: 3 });\n            await page.type('.input-text.qty.text', testCase.data.quantity.toString());\n            await clickElement(page, 'button[name=\"update_cart\"]');\n            if(!testCase.is_validation)\n                await page.waitForSelector('[role=\"alert\"]');\n            break;\n        case 'delete_item':\n            await page.waitForSelector('.remove');\n            await page.click('.remove');\n            break;\n        case 'restore-item':\n            await page.waitForSelector('.restore-item');\n            await page.click('.restore-item');\n            break;\n        \n        //check sản phẩm\n        case 'verify_toast_message':\n            await page.waitForSelector('.woocommerce-info.message-wrapper');\n            const errorText = await page.$eval('.woocommerce-info.message-wrapper', el => el.textContent);\n            expect(errorText).to.include(testCase.expectedResult);\n            break;\n        //check thông báo\n        case 'verify_toast_alert':\n            await page.waitForSelector('[role=\"alert\"]');\n            const errorAlert = await page.$eval('[role=\"alert\"]', el => el.textContent);\n            expect(errorAlert).to.include(testCase.expectedResult);\n            break;\n        case 'verify_validation':\n            const quantityInput = await page.$('.input-text.qty.text');\n            const validationMessage = await page.evaluate(el => el.validationMessage, quantityInput);\n            expect(validationMessage).to.include(testCase.expectedError);\n            break;\n        case 'proceed_to_checkout':\n            await page.waitForSelector('.checkout-button');\n            await page.click('.checkout-button');\n            break;\n        \n        case 'verify_url':\n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            expect(page.url()).to.equal(testCase.expectedResult);\n            break;\n        \n        case 'verify_discount':\n            const subtotalText = await page.$eval(\n                'tr.cart-subtotal td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const subtotal = parsePrice(subtotalText);\n            console.log(`Tạm tính: ${subtotalText} -> ${subtotal}`);\n            const discountText = await page.$eval(\n                'tr.cart-discount td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const discount = parsePrice(discountText);\n            console.log(`Giảm giá: ${discountText} -> ${discount}`);\n            const totalText = await page.$eval(\n                'tr.order-total td span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total = parsePrice(totalText);\n            console.log(`Tổng: ${totalText} -> ${total}`);\n            \n            if(testCase.use_discount)\n                expect(subtotal - discount).to.equal(total);\n            else\n                expect(subtotal).to.equal(total);\n            break;\n        case 'verify_price':\n            const unitPriceText = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-price span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const unitPrice = parsePrice(unitPriceText);\n            console.log(`Đơn giá: ${unitPriceText} -> ${unitPrice}`);\n            const totalText1 = await page.$eval(\n                'tr.woocommerce-cart-form__cart-item td.product-subtotal span.woocommerce-Price-amount',\n                (el) => el.textContent\n            );\n            const total1 = parsePrice(totalText1);\n            console.log(`Tạm tính: ${totalText1} -> ${total1}`);\n            \n            expect(unitPrice*testCase.data.quantity).to.equal(total1);\n            break;\n        case 'add_discount':\n            await page.click('#coupon_code', { clickCount: 3 });\n            await page.type('#coupon_code', testCase.discount);\n            await clickElement(page, 'button[name=\"apply_coupon\"]');\n            break;\n        case 'change_address':\n            await page.waitForSelector('.shipping-calculator-button');\n            await page.click('.shipping-calculator-button');\n            await page.click('#calc_shipping_city', { clickCount: 3 });\n            await page.type('#calc_shipping_city', testCase.data.address);\n            await clickElement(page, 'button[name=\"calc_shipping\"]');\n            \n            await page.waitForFunction(() => {\n                const spinner = document.querySelector('.blockUI.blockOverlay');\n                return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n            }, { timeout: 10000 });\n            const addressText = await page.$eval('.woocommerce-shipping-destination', el => el.textContent);\n            console.log(addressText);\n            expect(addressText).to.include(testCase.expectedResult);\n            break;\n    }\n}",
              "err": {
                "message": "Error: Execution context was destroyed, most likely because of a navigation.",
                "estack": "Error: Execution context was destroyed, most likely because of a navigation.\n    at rewriteError (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\cdp\\ExecutionContext.js:457:15)\n    at async #evaluate (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\cdp\\ExecutionContext.js:389:60)\n    at async ExecutionContext.evaluateHandle (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\cdp\\ExecutionContext.js:329:16)\n    at async IsolatedWorld.evaluateHandle (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\cdp\\IsolatedWorld.js:89:16)\n    at async CdpJSHandle.evaluateHandle (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\api\\JSHandle.js:157:20)\n    at async CdpElementHandle.evaluateHandle (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\api\\ElementHandle.js:351:20)\n    at async CSSQueryHandler.queryOne (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\common\\QueryHandler.js:137:59)\n    at async CdpElementHandle.$ (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\api\\ElementHandle.js:406:21)\n    at async CdpElementHandle.<anonymous> (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\api\\ElementHandle.js:132:24)\n    at async CdpFrame.$ (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\api\\Frame.js:402:20)\n    at async CdpPage.$ (node_modules\\puppeteer-core\\lib\\cjs\\puppeteer\\api\\Page.js:288:20)\n    at async Context.<anonymous> (tests\\cart.test.js:140:47)",
                "diff": null
              },
              "uuid": "178b26bb-1774-4ae7-b3c5-662629e456d7",
              "parentUUID": "a700937c-155b-4c60-bd58-7f1701f2bb5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "178b26bb-1774-4ae7-b3c5-662629e456d7"
          ],
          "pending": [],
          "skipped": [
            "cf35f10b-f40d-4d61-8a6a-6d790147d125",
            "2b16a4ed-750f-4770-834f-014c2e5ecafe",
            "facd8e89-47c8-4afc-9973-5a1a79aaedf7",
            "82b86e5e-8c49-4f12-a8e2-358dbcad93f5",
            "82fe2ffd-81e5-4a06-92ec-21a29ab350d5",
            "dc8c7f55-dd91-4a8a-af66-23b6c5d546b5",
            "e65e2e13-2ddd-4788-b650-2575df0b4b66",
            "1ba6c678-ad29-4ccd-8217-bac6ff00e1ae",
            "429d302a-3d5b-4a19-8e7e-587bd04c7551",
            "b5ec3980-5bf6-4406-85c2-b9e5de6f4989",
            "979921ab-488d-473d-943c-01707bf98b74",
            "148d47aa-3777-467b-8a01-cfa86ef4b8e3",
            "0b3b41ea-66f5-4d6b-a9c4-c791ed50954d",
            "be2f85db-a338-4348-83c5-0b458b5c60cc",
            "95589100-0e7e-4f67-915f-0e456f44eebd",
            "4cd8fb46-ad38-4089-bd23-596c8d04d39c",
            "26ef6490-51f3-4f9d-9913-f67fc93fe07c",
            "576ca4f1-7b5b-4691-9748-182aaa6f8499",
            "b024db38-addc-4897-8b62-de3797c3ad5d",
            "872cf7a2-e1b0-479d-ab0c-d0641eebfe24",
            "82935da0-44a7-46ba-aaf1-6d8369db880f"
          ],
          "duration": 9251,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.5.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}