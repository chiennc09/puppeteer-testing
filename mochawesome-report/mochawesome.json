{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 4,
    "pending": 0,
    "failures": 4,
    "start": "2025-06-15T18:40:39.715Z",
    "end": "2025-06-15T18:43:11.821Z",
    "duration": 152106,
    "testsRegistered": 8,
    "passPercent": 50,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4b0857ed-78c7-43cc-b36c-c7c346046a3b",
      "title": "",
      "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\order.test.js",
      "file": "\\tests\\order.test.js",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 10,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const chai = await import('chai');\nexpect = chai.expect;",
          "err": {},
          "uuid": "07722890-b0f4-4a19-80e4-5c51aabc495f",
          "parentUUID": "4b0857ed-78c7-43cc-b36c-c7c346046a3b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "628014a9-4904-4639-8c12-a737a19f9370",
          "title": "Order Functionality",
          "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\order.test.js",
          "file": "\\tests\\order.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Order Functionality\"",
              "fullTitle": "Order Functionality \"before all\" hook in \"Order Functionality\"",
              "timedOut": false,
              "duration": 514,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "browser = await puppeteer.launch({\n  headless: false,\n  args: ['--start-maximized'],\n});\npage = await browser.newPage();\nawait page.setViewport({ width: 1280, height: 720 });",
              "err": {},
              "uuid": "61cd4410-20bc-4863-b208-244afae1113c",
              "parentUUID": "628014a9-4904-4639-8c12-a737a19f9370",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Order Functionality\"",
              "fullTitle": "Order Functionality \"after all\" hook in \"Order Functionality\"",
              "timedOut": false,
              "duration": 446,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.close();",
              "err": {},
              "uuid": "23baf84b-75d6-4922-88e3-f75d460f41df",
              "parentUUID": "628014a9-4904-4639-8c12-a737a19f9370",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Đặt hàng khi thông tin được để trống",
              "fullTitle": "Order Functionality Đặt hàng khi thông tin được để trống",
              "timedOut": false,
              "duration": 17029,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\n// const termsCheckbox = await page.$('#terms');\n// if (termsCheckbox) {\n//   const isChecked = await page.$eval('#terms', el => el.checked);\n//   if (!isChecked) await page.click('#terms');\n// }\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\n// await new Promise(r => setTimeout(r, 1000));\n// const [response] = await Promise.all([\n//   page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout }).catch(() => null),\n//   page.click('#place_order'),\n// ]);\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(true).to.be.false; \n  }\n}\n// await new Promise(r => setTimeout(r, 5000));\n// const currentUrl = page.url();\n// if (testCase.expectResults) {\n//   await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n//   expect(currentUrl).to.include(testCase.navigation);\n// } else {\n//   if(currentUrl.include('/order-received')) {\n//     console.error(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n//     expect(currentUrl).not.to.include('/order-received');\n//   } else {\n//     await page.waitForSelector('.woocommerce-error', { timeout: config.timeout});\n//     const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n//     expect(errorText).to.include(testCase.expectedError);\n//   }\n// }",
              "err": {},
              "uuid": "78a4359c-7735-4106-b2f4-90dc77883a63",
              "parentUUID": "628014a9-4904-4639-8c12-a737a19f9370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đặt hàng khi nhập đúng kiểu thông tin “Họ”, “Tên”",
              "fullTitle": "Order Functionality Đặt hàng khi nhập đúng kiểu thông tin “Họ”, “Tên”",
              "timedOut": false,
              "duration": 17218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\n// const termsCheckbox = await page.$('#terms');\n// if (termsCheckbox) {\n//   const isChecked = await page.$eval('#terms', el => el.checked);\n//   if (!isChecked) await page.click('#terms');\n// }\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\n// await new Promise(r => setTimeout(r, 1000));\n// const [response] = await Promise.all([\n//   page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout }).catch(() => null),\n//   page.click('#place_order'),\n// ]);\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(true).to.be.false; \n  }\n}\n// await new Promise(r => setTimeout(r, 5000));\n// const currentUrl = page.url();\n// if (testCase.expectResults) {\n//   await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n//   expect(currentUrl).to.include(testCase.navigation);\n// } else {\n//   if(currentUrl.include('/order-received')) {\n//     console.error(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n//     expect(currentUrl).not.to.include('/order-received');\n//   } else {\n//     await page.waitForSelector('.woocommerce-error', { timeout: config.timeout});\n//     const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n//     expect(errorText).to.include(testCase.expectedError);\n//   }\n// }",
              "err": {},
              "uuid": "b72e5569-8283-4e8b-b6e6-4d3dd458e7ec",
              "parentUUID": "628014a9-4904-4639-8c12-a737a19f9370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đặt hàng khi nhập có kí tự đặc biệt của “Họ”, “Tên”",
              "fullTitle": "Order Functionality Đặt hàng khi nhập có kí tự đặc biệt của “Họ”, “Tên”",
              "timedOut": false,
              "duration": 21695,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\n// const termsCheckbox = await page.$('#terms');\n// if (termsCheckbox) {\n//   const isChecked = await page.$eval('#terms', el => el.checked);\n//   if (!isChecked) await page.click('#terms');\n// }\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\n// await new Promise(r => setTimeout(r, 1000));\n// const [response] = await Promise.all([\n//   page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout }).catch(() => null),\n//   page.click('#place_order'),\n// ]);\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(true).to.be.false; \n  }\n}\n// await new Promise(r => setTimeout(r, 5000));\n// const currentUrl = page.url();\n// if (testCase.expectResults) {\n//   await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n//   expect(currentUrl).to.include(testCase.navigation);\n// } else {\n//   if(currentUrl.include('/order-received')) {\n//     console.error(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n//     expect(currentUrl).not.to.include('/order-received');\n//   } else {\n//     await page.waitForSelector('.woocommerce-error', { timeout: config.timeout});\n//     const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n//     expect(errorText).to.include(testCase.expectedError);\n//   }\n// }",
              "err": {
                "message": "AssertionError: expected true to be false",
                "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (tests\\order.test.js:107:31)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "36f9090a-edc6-4ecc-a698-323e815025bc",
              "parentUUID": "628014a9-4904-4639-8c12-a737a19f9370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đặt hàng với đúng địa chỉ",
              "fullTitle": "Order Functionality Đặt hàng với đúng địa chỉ",
              "timedOut": false,
              "duration": 18729,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\n// const termsCheckbox = await page.$('#terms');\n// if (termsCheckbox) {\n//   const isChecked = await page.$eval('#terms', el => el.checked);\n//   if (!isChecked) await page.click('#terms');\n// }\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\n// await new Promise(r => setTimeout(r, 1000));\n// const [response] = await Promise.all([\n//   page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout }).catch(() => null),\n//   page.click('#place_order'),\n// ]);\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(true).to.be.false; \n  }\n}\n// await new Promise(r => setTimeout(r, 5000));\n// const currentUrl = page.url();\n// if (testCase.expectResults) {\n//   await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n//   expect(currentUrl).to.include(testCase.navigation);\n// } else {\n//   if(currentUrl.include('/order-received')) {\n//     console.error(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n//     expect(currentUrl).not.to.include('/order-received');\n//   } else {\n//     await page.waitForSelector('.woocommerce-error', { timeout: config.timeout});\n//     const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n//     expect(errorText).to.include(testCase.expectedError);\n//   }\n// }",
              "err": {},
              "uuid": "9ad652f4-9032-4f81-9f41-df1d7abb04c6",
              "parentUUID": "628014a9-4904-4639-8c12-a737a19f9370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đặt hàng với sai địa chỉ, có kí tự đặc biệt",
              "fullTitle": "Order Functionality Đặt hàng với sai địa chỉ, có kí tự đặc biệt",
              "timedOut": false,
              "duration": 21419,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\n// const termsCheckbox = await page.$('#terms');\n// if (termsCheckbox) {\n//   const isChecked = await page.$eval('#terms', el => el.checked);\n//   if (!isChecked) await page.click('#terms');\n// }\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\n// await new Promise(r => setTimeout(r, 1000));\n// const [response] = await Promise.all([\n//   page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout }).catch(() => null),\n//   page.click('#place_order'),\n// ]);\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(true).to.be.false; \n  }\n}\n// await new Promise(r => setTimeout(r, 5000));\n// const currentUrl = page.url();\n// if (testCase.expectResults) {\n//   await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n//   expect(currentUrl).to.include(testCase.navigation);\n// } else {\n//   if(currentUrl.include('/order-received')) {\n//     console.error(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n//     expect(currentUrl).not.to.include('/order-received');\n//   } else {\n//     await page.waitForSelector('.woocommerce-error', { timeout: config.timeout});\n//     const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n//     expect(errorText).to.include(testCase.expectedError);\n//   }\n// }",
              "err": {
                "message": "AssertionError: expected true to be false",
                "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (tests\\order.test.js:107:31)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "85f21556-cdc2-487f-b64a-4ef1c975054d",
              "parentUUID": "628014a9-4904-4639-8c12-a737a19f9370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đặt hàng với đúng số điện thoại",
              "fullTitle": "Order Functionality Đặt hàng với đúng số điện thoại",
              "timedOut": false,
              "duration": 18501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\n// const termsCheckbox = await page.$('#terms');\n// if (termsCheckbox) {\n//   const isChecked = await page.$eval('#terms', el => el.checked);\n//   if (!isChecked) await page.click('#terms');\n// }\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\n// await new Promise(r => setTimeout(r, 1000));\n// const [response] = await Promise.all([\n//   page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout }).catch(() => null),\n//   page.click('#place_order'),\n// ]);\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(true).to.be.false; \n  }\n}\n// await new Promise(r => setTimeout(r, 5000));\n// const currentUrl = page.url();\n// if (testCase.expectResults) {\n//   await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n//   expect(currentUrl).to.include(testCase.navigation);\n// } else {\n//   if(currentUrl.include('/order-received')) {\n//     console.error(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n//     expect(currentUrl).not.to.include('/order-received');\n//   } else {\n//     await page.waitForSelector('.woocommerce-error', { timeout: config.timeout});\n//     const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n//     expect(errorText).to.include(testCase.expectedError);\n//   }\n// }",
              "err": {},
              "uuid": "95414bcc-66fa-41a8-93f2-55a119a69540",
              "parentUUID": "628014a9-4904-4639-8c12-a737a19f9370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đặt hàng với số điện thoại có chứa kí tự đặc biệt",
              "fullTitle": "Order Functionality Đặt hàng với số điện thoại có chứa kí tự đặc biệt",
              "timedOut": false,
              "duration": 14778,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\n// const termsCheckbox = await page.$('#terms');\n// if (termsCheckbox) {\n//   const isChecked = await page.$eval('#terms', el => el.checked);\n//   if (!isChecked) await page.click('#terms');\n// }\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\n// await new Promise(r => setTimeout(r, 1000));\n// const [response] = await Promise.all([\n//   page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout }).catch(() => null),\n//   page.click('#place_order'),\n// ]);\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(true).to.be.false; \n  }\n}\n// await new Promise(r => setTimeout(r, 5000));\n// const currentUrl = page.url();\n// if (testCase.expectResults) {\n//   await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n//   expect(currentUrl).to.include(testCase.navigation);\n// } else {\n//   if(currentUrl.include('/order-received')) {\n//     console.error(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n//     expect(currentUrl).not.to.include('/order-received');\n//   } else {\n//     await page.waitForSelector('.woocommerce-error', { timeout: config.timeout});\n//     const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n//     expect(errorText).to.include(testCase.expectedError);\n//   }\n// }",
              "err": {
                "message": "AssertionError: expected '\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tMục Số điện thoại…' to include 'Só điện thoại không đúng định dạng!!'",
                "estack": "AssertionError: expected '\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tMục Số điện thoại…' to include 'Só điện thoại không đúng định dạng!!'\n    at Context.<anonymous> (tests\\order.test.js:103:34)",
                "diff": null
              },
              "uuid": "63dfef66-a665-4659-a741-aaa8f2c41d87",
              "parentUUID": "628014a9-4904-4639-8c12-a737a19f9370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Đặt hàng với số điện thoại không đúng độ dài",
              "fullTitle": "Order Functionality Đặt hàng với số điện thoại không đúng độ dài",
              "timedOut": false,
              "duration": 21750,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\n// const termsCheckbox = await page.$('#terms');\n// if (termsCheckbox) {\n//   const isChecked = await page.$eval('#terms', el => el.checked);\n//   if (!isChecked) await page.click('#terms');\n// }\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\n// await new Promise(r => setTimeout(r, 1000));\n// const [response] = await Promise.all([\n//   page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout }).catch(() => null),\n//   page.click('#place_order'),\n// ]);\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(true).to.be.false; \n  }\n}\n// await new Promise(r => setTimeout(r, 5000));\n// const currentUrl = page.url();\n// if (testCase.expectResults) {\n//   await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n//   expect(currentUrl).to.include(testCase.navigation);\n// } else {\n//   if(currentUrl.include('/order-received')) {\n//     console.error(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n//     expect(currentUrl).not.to.include('/order-received');\n//   } else {\n//     await page.waitForSelector('.woocommerce-error', { timeout: config.timeout});\n//     const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n//     expect(errorText).to.include(testCase.expectedError);\n//   }\n// }",
              "err": {
                "message": "AssertionError: expected true to be false",
                "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (tests\\order.test.js:107:31)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "658ef23b-e64d-4b67-b649-f753e83bbd50",
              "parentUUID": "628014a9-4904-4639-8c12-a737a19f9370",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78a4359c-7735-4106-b2f4-90dc77883a63",
            "b72e5569-8283-4e8b-b6e6-4d3dd458e7ec",
            "9ad652f4-9032-4f81-9f41-df1d7abb04c6",
            "95414bcc-66fa-41a8-93f2-55a119a69540"
          ],
          "failures": [
            "36f9090a-edc6-4ecc-a698-323e815025bc",
            "85f21556-cdc2-487f-b64a-4ef1c975054d",
            "63dfef66-a665-4659-a741-aaa8f2c41d87",
            "658ef23b-e64d-4b67-b649-f753e83bbd50"
          ],
          "pending": [],
          "skipped": [],
          "duration": 151119,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.5.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}