{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-06-23T18:10:45.252Z",
    "end": "2025-06-23T18:11:11.411Z",
    "duration": 26159,
    "testsRegistered": 9,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 8,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "4443792a-349b-43cb-a306-10c7e58cd331",
      "title": "",
      "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\order.test.js",
      "file": "\\tests\\order.test.js",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 12,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const chai = await import('chai');\nexpect = chai.expect;",
          "err": {},
          "uuid": "e92ce32b-2498-4d48-b23a-b26f1b9bb26c",
          "parentUUID": "4443792a-349b-43cb-a306-10c7e58cd331",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "24612c4d-bb66-4a44-b572-c1f45287edb3",
          "title": "Order Functionality",
          "fullFile": "E:\\Working\\Testing\\puppeteer-testing\\tests\\order.test.js",
          "file": "\\tests\\order.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Order Functionality\"",
              "fullTitle": "Order Functionality \"before all\" hook in \"Order Functionality\"",
              "timedOut": false,
              "duration": 627,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "browser = await puppeteer.launch({\n  headless: false,\n  args: ['--start-maximized'],\n});\npage = await browser.newPage();\nawait page.setViewport({ width: 1280, height: 720 });",
              "err": {},
              "uuid": "843f1b2e-ae75-48ac-a4c6-206788116b38",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Order Functionality\"",
              "fullTitle": "Order Functionality \"after all\" hook in \"Order Functionality\"",
              "timedOut": false,
              "duration": 413,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.close();",
              "err": {},
              "uuid": "acba1109-7c21-484d-a351-aff5480f3684",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[DH_01] Đặt hàng khi thông tin được để trống",
              "fullTitle": "Order Functionality [DH_01] Đặt hàng khi thông tin được để trống",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}/macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(isErrorVisible).to.be.true; \n  }\n}",
              "err": {},
              "uuid": "1fa0884c-0744-4e1c-ade9-c5d05a5cd845",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[DH_02] Đặt hàng khi nhập đúng kiểu thông tin “Họ”, “Tên”",
              "fullTitle": "Order Functionality [DH_02] Đặt hàng khi nhập đúng kiểu thông tin “Họ”, “Tên”",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}/macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(isErrorVisible).to.be.true; \n  }\n}",
              "err": {},
              "uuid": "53232b75-89d2-4d88-bc3b-3c80b56f5e5e",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[DH_03] Đặt hàng khi nhập có kí tự đặc biệt của “Họ”, “Tên”",
              "fullTitle": "Order Functionality [DH_03] Đặt hàng khi nhập có kí tự đặc biệt của “Họ”, “Tên”",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}/macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(isErrorVisible).to.be.true; \n  }\n}",
              "err": {},
              "uuid": "c398b854-79d8-43ef-94a6-9cf3f1646a5a",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[DH_04] Đặt hàng với đúng địa chỉ",
              "fullTitle": "Order Functionality [DH_04] Đặt hàng với đúng địa chỉ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}/macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(isErrorVisible).to.be.true; \n  }\n}",
              "err": {},
              "uuid": "aa7dbda4-01e3-4dc5-9f2e-8c80ffaccd70",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[DH_05] Đặt hàng với sai địa chỉ, có kí tự đặc biệt",
              "fullTitle": "Order Functionality [DH_05] Đặt hàng với sai địa chỉ, có kí tự đặc biệt",
              "timedOut": false,
              "duration": 25097,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}/macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(isErrorVisible).to.be.true; \n  }\n}",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (tests\\order.test.js:95:41)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "8464dc58-d66f-47b1-9159-9357c918e100",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[DH_06] Đặt hàng với đúng số điện thoại",
              "fullTitle": "Order Functionality [DH_06] Đặt hàng với đúng số điện thoại",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}/macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(isErrorVisible).to.be.true; \n  }\n}",
              "err": {},
              "uuid": "18dacb0d-b0ae-4b93-b3a1-bd5e66df0eb8",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[DH_07] Đặt hàng với số điện thoại có chứa toàn kí tự đặc biệt",
              "fullTitle": "Order Functionality [DH_07] Đặt hàng với số điện thoại có chứa toàn kí tự đặc biệt",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}/macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(isErrorVisible).to.be.true; \n  }\n}",
              "err": {},
              "uuid": "365a09e4-9eb4-4ad4-bb64-123fdb3ffbd6",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[DH_08] Đặt hàng với số điện thoại có chứa kí tự đặc biệt",
              "fullTitle": "Order Functionality [DH_08] Đặt hàng với số điện thoại có chứa kí tự đặc biệt",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}/macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(isErrorVisible).to.be.true; \n  }\n}",
              "err": {},
              "uuid": "9d0a0ea4-edd7-4fe1-8976-da029a3ecda9",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "[DH_09] Đặt hàng với số điện thoại không đúng độ dài",
              "fullTitle": "Order Functionality [DH_09] Đặt hàng với số điện thoại không đúng độ dài",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productUrl = `${config.baseUrl}/macbook-pro-m4-14-inch-2024-open-box/`;\nawait page.goto(productUrl, { waitUntil: 'networkidle2', timeout: config.timeout });\nconst variationSelector = 'select[name=\"attribute_pa_color\"]';\nif (await page.$(variationSelector)) {\n  await page.select(variationSelector, 'black');\n}\nawait clickElement(page, '.button.buy_now_button');\nawait page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });\n// Wait for checkout page\nawait waitForElement(page, '#customer_details');\nawait page.select('#billing_country', 'VN');\n// Clear fields\nawait page.evaluate(() => {\n  ['billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_phone', 'billing_email']\n    .forEach(id => {\n      const el = document.getElementById(id);\n      if (el) el.value = '';\n    });\n});\n// Fill form\nawait typeText(page, '#billing_first_name', testCase.firstName || '');\nawait typeText(page, '#billing_last_name', testCase.lastname || '');\nawait typeText(page, '#billing_address_1', testCase.address || '');\nawait typeText(page, '#billing_address_2', testCase.apartment || '');\nawait typeText(page, '#billing_city', testCase.city || '');\nawait typeText(page, '#billing_phone', testCase.phoneNumber || '');\nawait typeText(page, '#billing_email', testCase.email || '');\nawait page.click('body');\nawait page.waitForFunction(() => {\n  const spinner = document.querySelector('.blockUI.blockOverlay');\n  return !spinner || spinner.style.display === 'none' || spinner.offsetParent === null;\n}, { timeout: 10000 });\nawait page.evaluate(() => {\n  const btn = document.querySelector('#place_order');\n  if (btn) btn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n});\npage.click('#place_order');\nif (testCase.expectResults) {\n  await waitForElement(page, '.is-well.col-inner.entry-content', { timeout: config.timeout });\n  const currentUrl = page.url();\n  expect(currentUrl).to.include(config.orderReceived);\n} else {\n  async function doesElementExist(page, selector, timeout) {\n    return page.waitForSelector(selector, { timeout })\n        .then(() => true)   // Nếu promise thành công (tìm thấy), trả về true\n        .catch(() => false); // Nếu promise thất bại (timeout), trả về false\n  }\n  const isErrorVisible = await doesElementExist(page, '.woocommerce-error', 10000);\n  if(isErrorVisible) {\n    const errorText = await page.$eval('.woocommerce-error .message-container', el => el.textContent);\n    expect(errorText).to.include(testCase.expectedError);\n  } else {\n    console.log(`❌ FAILED: cần thông báo lỗi: ${testCase.expectedError}`);\n    // expect(currentUrl).to.equal(config.orderUrl);\n    expect(isErrorVisible).to.be.true; \n  }\n}",
              "err": {},
              "uuid": "3d7b83d2-a2e6-44c4-85ec-567c685b7383",
              "parentUUID": "24612c4d-bb66-4a44-b572-c1f45287edb3",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8464dc58-d66f-47b1-9159-9357c918e100"
          ],
          "pending": [],
          "skipped": [
            "1fa0884c-0744-4e1c-ade9-c5d05a5cd845",
            "53232b75-89d2-4d88-bc3b-3c80b56f5e5e",
            "c398b854-79d8-43ef-94a6-9cf3f1646a5a",
            "aa7dbda4-01e3-4dc5-9f2e-8c80ffaccd70",
            "18dacb0d-b0ae-4b93-b3a1-bd5e66df0eb8",
            "365a09e4-9eb4-4ad4-bb64-123fdb3ffbd6",
            "9d0a0ea4-edd7-4fe1-8976-da029a3ecda9",
            "3d7b83d2-a2e6-44c4-85ec-567c685b7383"
          ],
          "duration": 25097,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.5.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}